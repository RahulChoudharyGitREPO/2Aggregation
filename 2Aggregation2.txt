1:- Retrieve documents from the orders in ascending order by total:
db.orders.find().sort({ total: 1 })

2:- Retrieve the oldest paymentMethod from the payments collection as "_id":
db.payments.find().sort({ payment_date: 1 }).limit(1).project({ paymentMethod: 1, _id: 0 })

3:- Retrieve 2nd and 3rd buyers from the buyers collection:
db.buyers.find().skip(1).limit(2)

4:- Retrieve the most Expensive product from order_details:
db.order_details.aggregate([
  { $sort: { price: -1 } },
  { $limit: 1 },
  { $lookup: {
      from: "products",
      localField: "product_id",
      foreignField: "_id",
      as: "product"
    }
  },
  { $unwind: "$product" },
  { $project: { _id: "$product._id", name: "$product.name", price: "$price" } }
])

5:- Retrieve the first order from the orders as per the order_date:
db.orders.find().sort({ order_date: 1 }).limit(1)

6:- Retrieve the last 3 orders from the orders collection with the least total amount:
db.orders.find().sort({ total: 1 }).limit(3)

7:-Retrieve the most recent shipped order from the orders collection:
db.orders.find({ status: "shipped" }).sort({ ship_date: -1 }).limit(1)

8:- Get the total revenue from all orders:
db.orders.aggregate([
  { $group: { _id: null, totalRevenue: { $sum: "$total" } } }
])

9:- Retrieve all the orders that shipped before 2022-05-26:
db.orders.find({ ship_date: { $lt: ISODate("2022-05-26") } })

10:- Find the maximum price as maxPrice of products and their names as name for each category:
db.products.aggregate([
  { $group: {
      _id: "$category_id",
      maxPrice: { $max: "$price" },
      name: { $push: "$name" }
    }
  },
  { $lookup: {
      from: "categories",
      localField: "_id",
      foreignField: "_id",
      as: "category"
    }
  },
  { $unwind: "$category" },
  { $project: { _id: 0, category: "$category.name", maxPrice: 1, name: 1 } }
])
11:- Find the Most used payment Method as paymentMethod and the number of times it is used as count:
db.payments.aggregate([
  { $group: { _id: "$paymentMethod", count: { $sum: 1 } } },
  { $sort: { count: -1 } },
  { $limit: 1 }
])


12:- Find the total count of orders by status:
db.orders.aggregate([
  { $group: { _id: "$status", count: { $sum: 1 } } }
])
13:- Retrieve the orders grouped by customer_id with the max total:
db.orders.aggregate([
  { $group: {
      _id: "$customer_id",
      maxTotal: { $max: "$total" },
      orders: { $push: "$$ROOT" }
    }
  }
])